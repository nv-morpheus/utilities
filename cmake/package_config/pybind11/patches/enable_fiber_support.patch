# SPDX-FileCopyrightText: Copyright (c) 2021 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

diff --git a/include/pybind11/detail/type_caster_base.h b/include/pybind11/detail/type_caster_base.h
index f804d9d..a579a7f 100644
--- a/include/pybind11/detail/type_caster_base.h
+++ b/include/pybind11/detail/type_caster_base.h
@@ -25,6 +25,12 @@
 #include <utility>
 #include <vector>
 
+#define WITH_FIBERS
+
+#ifdef WITH_FIBERS
+#include <boost/fiber/fss.hpp>
+#endif
+
 PYBIND11_NAMESPACE_BEGIN(PYBIND11_NAMESPACE)
 PYBIND11_NAMESPACE_BEGIN(detail)
 
@@ -35,7 +41,20 @@ private:
     loader_life_support* parent = nullptr;
     std::unordered_set<PyObject *> keep_alive;
 
-#if defined(WITH_THREAD)
+#if defined(WITH_FIBERS)
+    // Store stack pointer in thread-local storage.
+    static boost::fibers::fiber_specific_ptr<loader_life_support>& get_stack_tls_key() {
+        static boost::fibers::fiber_specific_ptr<loader_life_support> fiber_stack([](loader_life_support* x){});
+        return fiber_stack;
+    }
+    static loader_life_support *get_stack_top() {
+        return get_stack_tls_key().get();
+    }
+    static void set_stack_top(loader_life_support *value) {
+        get_stack_tls_key().reset(value);
+    }
+
+#elif defined(WITH_THREAD)
     // Store stack pointer in thread-local storage.
     static PYBIND11_TLS_KEY_REF get_stack_tls_key() {
 #    if PYBIND11_INTERNALS_VERSION == 4
