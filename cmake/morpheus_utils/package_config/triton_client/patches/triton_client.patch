diff --git a/src/c++/library/CMakeLists.txt b/src/c++/library/CMakeLists.txt
index 9766772..fb16e19 100644
--- a/src/c++/library/CMakeLists.txt
+++ b/src/c++/library/CMakeLists.txt
@@ -142,7 +142,7 @@ if(TRITON_ENABLE_CC_GRPC OR TRITON_ENABLE_PERF_ANALYZER)
        grpcclient
        PROPERTIES
          LINK_DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/libgrpcclient.ldscript
-         LINK_FLAGS "-Wl,--version-script=libgrpcclient.ldscript"
+         LINK_FLAGS "-Wl,--version-script=${CMAKE_CURRENT_BINARY_DIR}/libgrpcclient.ldscript"
      )
   endif() # NOT WIN32 AND NOT TRITON_KEEP_TYPEINFO
 
@@ -310,7 +310,7 @@ if(TRITON_ENABLE_CC_HTTP OR TRITON_ENABLE_PERF_ANALYZER)
        httpclient
        PROPERTIES
          LINK_DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/libhttpclient.ldscript
-         LINK_FLAGS "-Wl,--version-script=libhttpclient.ldscript"
+         LINK_FLAGS "-Wl,--version-script=${CMAKE_CURRENT_BINARY_DIR}/libhttpclient.ldscript"
      )
   endif() # NOT WIN32
 
diff --git a/src/c++/library/http_client.cc b/src/c++/library/http_client.cc
index 138533f..e12cfd5 100644
--- a/src/c++/library/http_client.cc
+++ b/src/c++/library/http_client.cc
@@ -25,6 +25,7 @@
 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 // Include this first to make sure we are a friend of common classes.
+#include <mutex>
 #define TRITON_INFERENCE_SERVER_CLIENT_CLASS InferenceServerHttpClient
 #include "common.h"
 
@@ -61,6 +62,12 @@ constexpr char kContentLengthHTTPHeader[] = "Content-Length";
 // initialization before any other threads are created and before any
 // curl methods are used. The curl_global static object is used to
 // perform this initialization.
+
+class CurlGlobal;
+
+static std::mutex curl_global_mutex{};
+static CurlGlobal* curl_global = nullptr;
+
 class CurlGlobal {
  public:
   ~CurlGlobal();
@@ -69,7 +76,13 @@ class CurlGlobal {
 
   static const CurlGlobal& Get()
   {
-    static CurlGlobal* curl_global = new CurlGlobal();
+    if(curl_global == nullptr) {
+      auto lock = std::unique_lock(curl_global_mutex);
+      if(curl_global == nullptr) {
+        curl_global = new CurlGlobal();
+      }
+    }
+    // static CurlGlobal* curl_global = new CurlGlobal();
     return *curl_global;
   }
 
@@ -93,7 +106,12 @@ CurlGlobal::~CurlGlobal()
 
 class CurlGlobalDestroyer {
  public:
-  ~CurlGlobalDestroyer() { delete &CurlGlobal::Get(); }
+  ~CurlGlobalDestroyer() {
+    auto lock = std::unique_lock(curl_global_mutex);
+    if (curl_global != nullptr) {
+      delete &CurlGlobal::Get();
+    }
+  }
 };
 
 static CurlGlobalDestroyer curl_global_destroyer_;
@@ -713,7 +731,7 @@ ShapeHelper(
   }
 
   for (size_t i = 0; i < shape_json.ArraySize(); i++) {
-    int64_t dim;
+    int64_t dim{};
     Error err = shape_json.IndexAsInt(i, &dim);
     if (!err.IsOk()) {
       return err;
